package com.practice.oct15;

import java.util.ArrayList;
import java.util.Arrays;

public class GetMaxSum {
	private static int getMaxSum(int[] A, int n) {
		ArrayList<Integer> a = new ArrayList<Integer>();
		int temp = 0;
		int i = 0;
		int j = 0;
		//Compress sequence of values>0 or values <0
		while(i < n) {
			temp = 0;
			if(A[i] >= 0) {
				temp = A[i];
				for(j = i + 1; j < n; ++j) {
					if(A[j] >= 0) {
						temp += A[j];
					}
					else {
						break;
					}
				}
				a.add(temp);
			}
			else {
				temp = A[i];
				for(j = i + 1; j < n; ++j) {
					if(A[j] < 0) {
						temp += A[j];
					}
					else {
						break;
					}
				}
				a.add(temp);
			}
			i = j;
		}
		int[] d = new int[a.size()];
		for(int k = 0; k < a.size(); ++k) {
			d[k] = a.get(k);
			//test
			System.out.print(d[k] + " ");
			//
		}
		//
		System.out.println();
		//
		//find first value bigger than 0
		int pos = -1;
		for(int k = 0; k < d.length; ++k) {
			if(d[k] >= 0) {
				pos = k;
				break;
			}
		}
		if(pos == -1) {
			Arrays.sort(d);
			return d[d.length-1];
		}
		else {
			//
			System.out.println("pos: " + pos + " value: " + d[pos]);
			System.out.println();
			//
			if(pos == d.length - 1 || pos == d.length - 2) {
				return d[pos];
			}
			else {
				int max = d[pos];
				pos += 2;
				while(pos < d.length) {
					if(d[pos] + d[pos-1] >= 0 && d[pos-2] + d[pos-1] >= 0) {
						max += (d[pos] + d[pos-1]);
						System.out.println("pos: " + pos + " value: " + d[pos]);
						System.out.println("max: " + max);
						System.out.println();
					}
					else {
						max = Math.max(max, d[pos]);
						System.out.println("pos: " + pos + " value: " + d[pos]);
						System.out.println("max: " + max);
						System.out.println();
					}
					pos += 2;
				}
				return max;
			}
		}	
	}

	
	public static void main(String[] args) {
		int[] a = {};
		int n = a.length;
		int res = getMaxSum(a, n);
		System.out.println(res);
	}

	
	
}
/*
 * 
测试用例:

对应输出应该为:
8040230 
你的输出为:
24786010
 */